name: Terraform Deploy AWS

env:
  TFPath: AWS/
  TF_ROOT: AWS/

on:
  push:
    branches:
      - main
    paths:
    - 'AWS/**'
    - '!AWS/**.md'
  pull_request_target:
    branches:
      - main
    paths:
    - 'AWS/**'
    - '!AWS/**.md'
# To be reviewed: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/

jobs:
  terraform:
    name: "Day 1 - Terraform"
    runs-on: ubuntu-latest
    env:
      TF_VAR_PREFIX: "FORTINET-${{ github.run_id }}-${{ github.run_number }}"
      TF_VAR_REGION: "westeurope"
      TF_VAR_USERNAME: "admin"
      TF_VAR_PASSWORD: "${{ secrets.PASSWORD }}"
      TF_VAR_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_KEY_PAIR: ${{ secrets.AWS_KEY_PAIR }}
      TF_VAR_ORG_ID: ${{ secrets.ORG_ID }}
      TF_VAR_APP_ID: ${{ secrets.APP_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: FortiDevSec SAST Scan
         with:
          org-id: ${{ secrets.ORG_ID }}
          app-id: ${{ secrets.APP_ID }}
         env:
          org-id: ${{ secrets.ORG_ID }}
          app-id: ${{ secrets.APP_ID }}
         run: |
          env | grep -E "GITHUB_ACTIONS|GITHUB_RUN_NUMBER|GITHUB_REF_NAME|GITHUB_SHA" > /tmp/env
          docker pull registry.fortidevsec.forticloud.com/fdevsec_sast:latest
          docker run --rm --env-file /tmp/env --mount type=bind,source=$PWD,target=/scan registry.fortidevsec.forticloud.com/fdevsec_sast:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TFPath }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TFPath }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TFPath }}

      - name: Terraform Plan
        id: plan
#        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -out plan.tfplan
        continue-on-error: true
        working-directory: ${{ env.TFPath }}

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Setup Infracost
        uses: infracost/actions/setup@v1
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=${TF_ROOT} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{github.token}} \
                                     --pull-request=${{github.event.pull_request.number}} \
                                     --behavior=update

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ${{ env.TFPath }}
